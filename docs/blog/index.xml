<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jiho Kim</title>
<link>https://jihokim.dev/blog/</link>
<atom:link href="https://jihokim.dev/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Thu, 11 Apr 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Transformer Visualized</title>
  <dc:creator>Jiho Kim</dc:creator>
  <link>https://jihokim.dev/blog/transformer-visualized/</link>
  <description><![CDATA[ 




<p><img src="https://jihokim.dev/blog/transformer-visualized/tokenization.svg" class="img-fluid"></p>
<p><img src="https://jihokim.dev/blog/transformer-visualized/input_embedding.svg" class="img-fluid"></p>
<p><img src="https://jihokim.dev/blog/transformer-visualized/position_embedding.svg" class="img-fluid"></p>
<p><img src="https://jihokim.dev/blog/transformer-visualized/input_and_position_embedding.svg" class="img-fluid"></p>



 ]]></description>
  <category>NLP</category>
  <guid>https://jihokim.dev/blog/transformer-visualized/</guid>
  <pubDate>Thu, 11 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Inspirative Text Prediction</title>
  <link>https://jihokim.dev/blog/inspirative-text-prediction/</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Machine learning, and more specifically, deep learning, is shaping how we write. From academic papers to class materials, emails to text messages, we are constantly using technologies powered by deep learning to compose our texts. Moreover, studies have shown that predictive text influences what we write <span class="citation" data-cites="Arnold_Chauncey_Gajos_2020 Arnold_Chauncey_Gajos_2018 Jakesch_Bhat_Buschek_Zalmanson_Naaman_2023">[1,2,4]</span>. Currently, most text prediction technology uses a model that looks at the previously typed words and the surrounding text to generate a list of likely next words or phrases. It ranks each of them based on their probabilities and presents the most likely ones to users as suggestions. However, not only may those suggestions be biased, but they may also affect how users write and what they write, thereby taking away their authorship and autonomy. <strong>Could text prediction models instead serve as a source of <em>inspiration</em> for users, encouraging their writing process instead of suggesting what to write?</strong></p>
<p>In this blog post, I will explore the possibility of using text prediction to <em>inspire</em> users to write more original texts. I will define what it means to be <em>inspirational</em> and then present a preliminary approach to collecting example data and evaluating the current large language models (LLMs) to determine their likelihood of predicting subordinating conjunctions. I will then discuss the challenges and opportunities of using text prediction to <em>inspire</em> users to write more original texts.</p>
</section>
<section id="background-and-related-work" class="level2">
<h2 class="anchored" data-anchor-id="background-and-related-work">Background and Related Work</h2>
<section id="what-does-it-mean-to-be-inspirative" class="level3">
<h3 class="anchored" data-anchor-id="what-does-it-mean-to-be-inspirative">What does it mean to be <em>inspirative</em>?</h3>
<p>In this blog post, I will use the term inspirative to describe the tendency “to draw forth or bring out.”<sup>1</sup> Specifically, in the context of text prediction, this means that the model should inspire users to write original texts that are not generated by machines. Instead of suggesting the most likely next words or phrases, the model should encourage users to think about what they have written so far and what they could write next. Flower and Hayes define writing as a cognitive process, suggesting that it involves organizing and connecting various types of thinking processes that go into writing, each capable of interrupting and influencing the others <span class="citation" data-cites="Flower_Hayes_1981">[3]</span>. How can we support this cognitive process in writing using text prediction? One possible approach investigated by Hyechan Jun, Ha-Ram Koo, and Advait Scaria involves presenting the prediction output in the form of an interview question rather than written text <span class="citation" data-cites="Jun_Koo_Scaria_2021">[5]</span>. Questions inherently stimulate thinking and reflection, and this approach has the potential to prompt writers to think about their writing goals and evaluate their written text in order to answer the questions. However, a challenge is that questions must be thought-provoking and they must produce a new concept or idea to warrant their usefulness. In this work, I will explore a different approach. Since text prediction models are already good at predicting texts ahead of time, what if some of those texts could be hidden from the user, inspiring them to complete the text with existing hints?</p>
</section>
<section id="on-subordinating-conjunctions" class="level3">
<h3 class="anchored" data-anchor-id="on-subordinating-conjunctions">On Subordinating Conjunctions</h3>
<p>Suppose a writer writes an independent clause: “The plant grew taller.” Instead of suggesting the most likely next words or phrases, the model could predict the word “because,” a subordinating conjunction. The word “because” has a fascinating property of making the writer think: “Why did the plant grow taller?” The writer could then complete the sentence with a dependent clause: “<em>because</em> they received an adequate amount of sunlight.” This approach to text prediction has the potential to inspire writers to think about their writing goals and evaluate their written text in order to complete their text with <em>some</em> hint, in this case, a subordinating conjunction. In this work, I will explore this approach by evaluating the current LLMs to determine their likelihood of predicting such subordinating conjunctions.</p>
</section>
</section>
<section id="exploratory-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-data-analysis">Exploratory Data Analysis</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pio</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spacy</span>
<span id="cb1-6"></span>
<span id="cb1-7">pio.templates.default <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly_white"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">spacy.prefer_gpu()</span>
<span id="cb1-10">nlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spacy.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en_core_web_sm"</span>)</span></code></pre></div>
<section id="collection" class="level3">
<h3 class="anchored" data-anchor-id="collection">Collection</h3>
<p>Let’s start by defining a function to download a book from <a href="https://www.gutenberg.org/">Project Gutenberg</a>. To accomplish this, we will use <a href="https://gutendex.com/">Gutendex</a> to retrieve the book’s metadata and then download the book using the URL to the plain text version of the book provided in the metadata. For the purpose of this blog post, we will only download books in English.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: True</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_book(book_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Download a book from Project Gutenberg</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        book_id: The Project Gutenberg ID of the book to download</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A tuple containing the book title and the book text</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    gutendex_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://gutendex.com/books/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>book_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span></span>
<span id="cb2-14"></span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb2-16">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(gutendex_url)</span>
<span id="cb2-17">        response.raise_for_status()</span>
<span id="cb2-18">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb2-19"></span>
<span id="cb2-20">        book_language <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"languages"</span>]</span>
<span id="cb2-21"></span>
<span id="cb2-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only download books in English</span></span>
<span id="cb2-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> book_language:</span>
<span id="cb2-24">            book_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>]</span>
<span id="cb2-25"></span>
<span id="cb2-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only download books in plain text</span></span>
<span id="cb2-27">            mime_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/plain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/plain; charset=us-ascii"</span>]</span>
<span id="cb2-28"></span>
<span id="cb2-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mime_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mime_types:</span>
<span id="cb2-30">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mime_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formats"</span>]:</span>
<span id="cb2-31">                    book_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formats"</span>][mime_type]</span>
<span id="cb2-32">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb2-33"></span>
<span id="cb2-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> book_url <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-35">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The book is not available in plain text."</span>)</span>
<span id="cb2-36"></span>
<span id="cb2-37">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(book_url)</span>
<span id="cb2-38">            response.raise_for_status()</span>
<span id="cb2-39"></span>
<span id="cb2-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> book_title, response.text</span>
<span id="cb2-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The book is not in English."</span>)</span>
<span id="cb2-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> requests.exceptions.HTTPError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> err:</span>
<span id="cb2-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(err)</span></code></pre></div>
<p>For this EDA, we will download <em>The Strange Case of Dr.&nbsp;Jekyll and Mr.&nbsp;Hyde</em> by Robert Louis Stevenson.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Book ID for The Strange Case of Dr. Jekyll and Mr. Hyde</span></span>
<span id="cb3-2">book_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the book and store it in a DataFrame</span></span>
<span id="cb3-5">book_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [download_book(book_id)]</span>
<span id="cb3-6">book_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(book_data, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>])</span></code></pre></div>
</section>
<section id="wrangling" class="level3">
<h3 class="anchored" data-anchor-id="wrangling">Wrangling</h3>
<p>Let’s take a look at the downloaded text:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 256 characters of the book</span></span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(book_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>].iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>].strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">...</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the last 256 characters of the book</span></span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(book_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>].iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>:].strip(), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
<p>It looks like the text contains some extra information which we do not wish to include in our analysis. Let’s remove the extra information and save the cleaned text in a new column.</p>
<p>Specifically, we will use the markers provided by <a href="https://www.gutenberg.org/">Project Gutenberg</a> to remove the extra information. These markers appear as follows:</p>
<blockquote class="blockquote">
<p>*** START OF THE PROJECT GUTENBERG EBOOK …</p>
</blockquote>
<blockquote class="blockquote">
<p>*** END OF THE PROJECT GUTENBERG EBOOK …</p>
</blockquote>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sanitize_text(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Remove extra information from the text</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        text: The text to sanitize</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The sanitized text</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    start_marker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"***"</span></span>
<span id="cb5-14">    end_marker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*** END OF THE PROJECT GUTENBERG EBOOK"</span></span>
<span id="cb5-15"></span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the second occurrence of the start marker</span></span>
<span id="cb5-17">    start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.find(start_marker, text.find(start_marker) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-18"></span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the first occurrence of the end marker</span></span>
<span id="cb5-20">    end_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.find(end_marker)</span>
<span id="cb5-21"></span>
<span id="cb5-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the extra information based on the marker indices</span></span>
<span id="cb5-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb5-24">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text[start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(start_marker) : end_index].strip()</span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> text</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanitize the text and store it in a new column</span></span>
<span id="cb6-2">book_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean_text"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> book_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(sanitize_text)</span></code></pre></div>
<p>Let’s take a look at the cleaned text:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 256 characters of the book</span></span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(book_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean_text"</span>].iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>].strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">...</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the last 256 characters of the book</span></span>
<span id="cb7-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(book_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean_text"</span>].iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>:].strip())</span></code></pre></div>
<p>This looks much better! Our next step is to split the text into sentences to analyze it at the sentence level. We will use <a href="https://spacy.io/">spaCy</a> to do this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sentence_spliter(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Split the text into sentences</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        text: The text to split</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A list of sentences</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-12"></span>
<span id="cb8-13">    pipe_disable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ner"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lemmatizer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"textcat"</span>]</span>
<span id="cb8-14"></span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove line breaks and split the text into sentences</span></span>
<span id="cb8-16">    doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nlp.pipe([text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)], disable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pipe_disable)</span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return a list of sentences without leading and trailing whitespace</span></span>
<span id="cb8-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [sent.text.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> doc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> doc <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sent <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> doc.sents]</span></code></pre></div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the text into sentences and store them in a DataFrame</span></span>
<span id="cb9-2">sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_spliter(book_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean_text"</span>].iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb9-3">sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(sentences, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>])</span>
<span id="cb9-4"></span>
<span id="cb9-5">sentences.tail()</span></code></pre></div>
<p>How many sentences are there in the book?</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"There are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sentences)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sentences in the book."</span>)</span></code></pre></div>
<p>How many sentence use subordinating conjunctions? In order to answer this question, we will use <a href="https://spacy.io/">spaCy</a>’s part-of-speech tagger to identify sentences that contain subordinating conjunctions:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> doc_pipe(sentence: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb11-4">    pipe_disable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ner"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lemmatizer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"textcat"</span>]</span>
<span id="cb11-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(nlp.pipe([sentence], disable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pipe_disable))</span>
<span id="cb11-6"></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> has_sconj(sentence: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Check if a sentence contains a subordinating conjunction</span></span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sentence: The sentence to check</span></span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A Pandas Series containing a boolean value indicating whether the sentence contains a subordinating conjunction and the subordinating conjunction if it exists</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-17"></span>
<span id="cb11-18">    doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> doc_pipe(sentence)</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the sentence contains a subordinating conjunction</span></span>
<span id="cb11-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> doc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb11-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> token.pos_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SCONJ"</span>:</span>
<span id="cb11-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.Series([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, token.text])</span>
<span id="cb11-24"></span>
<span id="cb11-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.Series([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-overflow: wrap</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the sentence contains a subordinating conjunction and store the result in a new column</span></span>
<span id="cb12-4">sentences[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has_sconj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sconj"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentences[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(has_sconj)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanity check</span></span>
<span id="cb12-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> sentences[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has_sconj"</span>].value_counts().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sentences)</span>
<span id="cb12-8"></span>
<span id="cb12-9">sentences.tail()</span></code></pre></div>
<p>How many of the sentences contain subordinating conjunctions? How many of the sentences do not contain subordinating conjunctions?</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb13-4">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"There are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sentences[sentences[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_sconj'</span>]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sentences with a subordinating conjunction,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">and </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sentences[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>sentences[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_sconj'</span>]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sentences without a subordinating conjunction."</span></span>
<span id="cb13-5">)</span></code></pre></div>
</section>
<section id="visualization" class="level3">
<h3 class="anchored" data-anchor-id="visualization">Visualization</h3>
<p>Let’s try visualizing one of the sentences that contains a subordinating conjunction:</p>
<p><strong>Figure 1.</strong> Visualization of a Sentence That Contains a Subordinating Conjunction</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab a sentence that contains a subordinating conjunction</span></span>
<span id="cb14-4">sentence_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1149</span></span>
<span id="cb14-5">doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nlp(sentences[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].iloc[sentence_id])</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the sentence using displaCy</span></span>
<span id="cb14-8">spacy.displacy.render(doc, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dep"</span>, jupyter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>})</span></code></pre></div>
<p>What about the distribution of subordinating conjunctions in the book?</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lower case the subordinating conjunctions and count them</span></span>
<span id="cb15-4">sent_sconj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentences[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sconj"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower().value_counts().reset_index()</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution of subordinating conjunctions</span></span>
<span id="cb15-7">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.bar(</span>
<span id="cb15-8">    sent_sconj,</span>
<span id="cb15-9">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sconj"</span>,</span>
<span id="cb15-10">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>,</span>
<span id="cb15-11">    title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;b&gt;Figure 2.&lt;/b&gt; Distribution of Subordinating Conjunctions"</span>,</span>
<span id="cb15-12">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sconj"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subordinating Conjunction"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>},</span>
<span id="cb15-13">    color_discrete_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>px.colors.qualitative.Safe</span>
<span id="cb15-14">)</span>
<span id="cb15-15"></span>
<span id="cb15-16">fig.show()</span></code></pre></div>
</section>
<section id="analysis" class="level3">
<h3 class="anchored" data-anchor-id="analysis">Analysis</h3>
<p>This result is somewhat surprising to me. I did not expect “that” to be the most common subordinating conjunction in the book. I had expected “because” to be more common when compared to the other subordinating conjunctions since I personally use “because” frequently in my writing. This might suggest that there could be a different distribution of subordinating conjunctions that are more commonly used based on the writing context. Furthermore, this result does not provide any information about which subordinating conjunctions are more useful than others, particularly in the context of text prediction. Our next step is to evaluate the current large language models (LLMs) to determine their likelihood of predicting subordinating conjunctions.</p>
</section>
</section>
<section id="preliminary-modeling" class="level2">
<h2 class="anchored" data-anchor-id="preliminary-modeling">Preliminary Modeling</h2>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModelForCausalLM</span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> softmax, cross_entropy</span>
<span id="cb16-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb16-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb16-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb16-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb16-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb16-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spacy</span>
<span id="cb16-9"></span>
<span id="cb16-10">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:0"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb16-11"></span>
<span id="cb16-12">spacy.prefer_gpu()</span>
<span id="cb16-13">nlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spacy.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en_core_web_sm"</span>)</span></code></pre></div>
<section id="load-the-model" class="level3">
<h3 class="anchored" data-anchor-id="load-the-model">Load the Model</h3>
<p>We will use the <a href="https://huggingface.co/meta-llama/Llama-2-7b-chat-hf">Llama-2-7b-chat-hf</a> model to evaluate an LLM’s likelihood of predicting subordinating conjunctions. Unfortunately, running the model is computationally expensive on most machines. Therefore, we used <a href="https://github.com/casper-hansen/AutoAWQ">AutoAWQ</a> to quantize the model into 4-bit precision<sup>2</sup>. This reduces the amount of computational resources required to run inference on the model while still maintaining a high level of accuracy. We have provided our code for quantizing the model in the Appendix. In the meantime, you can access our quantized model here: <a href="https://huggingface.co/CalvinU/Llama-2-7b-chat-hf-awq">CalvinU/Llama-2-7b-chat-hf-awq</a>.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CalvinU/Llama-2-7b-chat-hf-awq"</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_name)</span>
<span id="cb17-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(model_name).to(device)</span></code></pre></div>
</section>
<section id="load-the-data" class="level3">
<h3 class="anchored" data-anchor-id="load-the-data">Load the Data</h3>
<p>We have also described in the Appendix a scalable approach to collecting and processing data from <a href="https://www.gutenberg.org/">Project Gutenberg</a>. In the meantime, you can access our dataset here: <a href="https://huggingface.co/datasets/CalvinU/project-gutenberg">CalvinU/project-gutenberg</a>.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CalvinU/project-gutenberg"</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(dataset_name, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>)</span>
<span id="cb18-4">dataset_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(dataset)</span></code></pre></div>
<p>The dataset contains 10 random books downloaded from <a href="https://www.gutenberg.org/">Project Gutenberg</a>. These books have already been sanitized and split into sentences based on their <code>book_id</code> and <code>title</code>. Therefore, each row in the dataset represents an ordered sentence from one of the books. Let’s take a look at the dataset:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">dataset_df.tail()</span></code></pre></div>
</section>
<section id="wrangling-1" class="level3">
<h3 class="anchored" data-anchor-id="wrangling-1">Wrangling</h3>
<p>Since we already have an ordered list of sentences, we can apply the same approach we used in the EDA section to identify sentences that contain subordinating conjunctions:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> doc_pipe(sentence: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb20-4">    pipe_disable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ner"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lemmatizer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"textcat"</span>]</span>
<span id="cb20-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(nlp.pipe([sentence], disable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pipe_disable))</span>
<span id="cb20-6"></span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> has_sconj(sentence: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Check if a sentence contains a subordinating conjunction</span></span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sentence: The sentence to check</span></span>
<span id="cb20-13"></span>
<span id="cb20-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb20-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A Pandas Series containing a boolean value indicating whether the sentence contains a subordinating conjunction and the subordinating conjunction if it exists</span></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb20-17"></span>
<span id="cb20-18">    doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> doc_pipe(sentence)</span>
<span id="cb20-19"></span>
<span id="cb20-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the sentence contains a subordinating conjunction</span></span>
<span id="cb20-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> doc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb20-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> token.pos_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SCONJ"</span>:</span>
<span id="cb20-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.Series([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, token.text])</span>
<span id="cb20-24"></span>
<span id="cb20-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.Series([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span></code></pre></div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the sentence contains a subordinating conjunction and store the result in a new column</span></span>
<span id="cb21-2">dataset_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has_sconj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sconj"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(has_sconj)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanity check</span></span>
<span id="cb21-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> dataset_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has_sconj"</span>].value_counts().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset_df)</span>
<span id="cb21-6"></span>
<span id="cb21-7">dataset_df.tail()</span></code></pre></div>
<p>Number of sentences and number of sentences that contain subordinating conjunctions for each book:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>], as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).agg(</span>
<span id="cb22-2">    num_sents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>),</span>
<span id="cb22-3">    num_sconj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has_sconj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>),</span>
<span id="cb22-4">)</span>
<span id="cb22-5"></span>
<span id="cb22-6">summary.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</section>
<section id="analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="analysis-1">Analysis</h3>
<p>Suppose the general structure of a sentence with a subordinating conjunction is:</p>
<pre><code>&lt;sentence-with-SCONJ&gt; ::= &lt;subordinate-clause&gt; &lt;independent-clause&gt; | 
                          &lt;independent-clause&gt; &lt;subordinate-clause&gt;</code></pre>
<p>Note that a <code>&lt;subordinate-clause&gt;</code> is a <em>dependent</em> clause that contains a subordinating conjunction and cannot stand alone as a sentence, while an <code>&lt;independent-clause&gt;</code> is a <em>main</em> clause that can stand alone as a sentence.</p>
<p>In order to evaluate the likelihood of an LLM predicting subordinating conjunctions, we will investigate the following behaviors:</p>
<blockquote class="blockquote">
<p>How does the cross-entropy and perplexity change when we provide the context exactly as it appears in the book, versus when we randomly shuffle the context?</p>
</blockquote>
<blockquote class="blockquote">
<p>And for each case, what is the probability spectrum at the subordinating conjunction? What is the cross-entropy and perplexity of the text after the subordinating conjunction?</p>
</blockquote>
<section id="when-context-is-provided-exactly-as-it-appears-in-the-book" class="level4">
<h4 class="anchored" data-anchor-id="when-context-is-provided-exactly-as-it-appears-in-the-book">When Context Is Provided Exactly as It Appears in the Book</h4>
<p>To get started, let’s select one of the books from the dataset titled _ The Adventures of a Dog, and a Good Dog Too_ by Alfred Elwes:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Book ID for The Adventures of a Dog, and a Good Dog Too</span></span>
<span id="cb24-4">book_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20741</span></span>
<span id="cb24-5"></span>
<span id="cb24-6">selected_book <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_df[dataset_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> book_id].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb24-7">selected_book.tail()</span></code></pre></div>
<p>How many sentences are there in the book? How many of the sentences contain subordinating conjunctions?</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb25-4">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"There are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(selected_book)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sentences in the book. There are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(selected_book[selected_book[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_sconj'</span>]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sentences with a subordinating conjunction"</span></span>
<span id="cb25-5">)</span></code></pre></div>
<p>It appears that this book uses a significant number of subordinating conjunctions! Let’s choose one of the last sentences that includes a subordinating conjunction and select a maximum of 100 sentences preceding it as the context:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">last_sconj_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book[selected_book[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has_sconj"</span>]].index[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb26-2"></span>
<span id="cb26-3">context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(last_sconj_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) : last_sconj_index][</span>
<span id="cb26-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span></span>
<span id="cb26-5">].tolist()</span>
<span id="cb26-6"></span>
<span id="cb26-7">context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(context)</span>
<span id="cb26-8"></span>
<span id="cb26-9">sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>]</span></code></pre></div>
<p>Let’s take a small peek at the context:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 50 characters of the context</span></span>
<span id="cb27-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(context[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>].strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ... "</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb27-5"></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the last 50 characters of the context</span></span>
<span id="cb27-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(context[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:].strip(), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>Let’s take a look at the sentence with the subordinating conjunction:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sentence</span></span>
<span id="cb28-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sentence)</span></code></pre></div>
<p>Let’s tokenize the context and the sentence, and then feed them into the model to get the predicted logits:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the context (to be used later, not as an input sequence)</span></span>
<span id="cb29-4">context_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(context, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(device)</span>
<span id="cb29-5">context_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context_tokenized.input_ids</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the sentence (to be used later, not as an input sequence)</span></span>
<span id="cb29-8">sentence_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(sentence, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(device)</span>
<span id="cb29-9">sentence_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_tokenized.input_ids</span>
<span id="cb29-10"></span>
<span id="cb29-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the context and the sentence as an input sequence</span></span>
<span id="cb29-12">prompt_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sentence, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(device)</span>
<span id="cb29-13">prompt_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt_tokenized.input_ids</span>
<span id="cb29-14"></span>
<span id="cb29-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the predicted logits for the input sequence</span></span>
<span id="cb29-16">model_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(prompt_input_ids).logits</span></code></pre></div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the subordinating conjunction from the book</span></span>
<span id="cb30-4">sconj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sconj"</span>]</span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decode the context as a string, excluding the first token</span></span>
<span id="cb30-7">context_decoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tokenizer.decode(token) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> context_input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decode the sentence as a string, excluding the first token</span></span>
<span id="cb30-10">sentence_decoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tokenizer.decode(token) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sentence_input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the subordinating conjunction token in the input sequence</span></span>
<span id="cb30-13">sconj_token_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(context_decoded) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sentence_decoded.index(sconj)</span>
<span id="cb30-14"></span>
<span id="cb30-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the subordinating conjunction in the sentence (not the input sequence, but from the book)</span></span>
<span id="cb30-16">sconj_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].find(sconj)</span>
<span id="cb30-17"></span>
<span id="cb30-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Figure out which type of clause comes first</span></span>
<span id="cb30-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sconj <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sentence[:sconj_index]:</span>
<span id="cb30-20">    independent_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[:sconj_index]</span>
<span id="cb30-21">    subordinate_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[sconj_index:]</span>
<span id="cb30-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb30-23">    independent_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[sconj_index:]</span>
<span id="cb30-24">    subordinate_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[:sconj_index]</span>
<span id="cb30-25"></span>
<span id="cb30-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the independent clause in the sentence (not the input sequence, but from the book)</span></span>
<span id="cb30-27">independent_clause_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].find(</span>
<span id="cb30-28">    independent_clause</span>
<span id="cb30-29">)</span>
<span id="cb30-30"></span>
<span id="cb30-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the subordinate clause in the sentence (not the input sequence, but from the book)</span></span>
<span id="cb30-32">subordinate_clause_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].find(</span>
<span id="cb30-33">    subordinate_clause</span>
<span id="cb30-34">)</span>
<span id="cb30-35"></span>
<span id="cb30-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the independent clause</span></span>
<span id="cb30-37">independent_clause_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb30-38">    independent_clause, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span></span>
<span id="cb30-39">).to(device)</span>
<span id="cb30-40"></span>
<span id="cb30-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the subordinate clause</span></span>
<span id="cb30-42">subordinate_clause_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb30-43">    subordinate_clause, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span></span>
<span id="cb30-44">).to(device)</span></code></pre></div>
<p>Given that we have fed in the context exactly as it appears in the book, let’s take a look at the top k probability spectrum at the subordinating conjunction:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> probability_spectrum_at(logits, input_ids, i, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb31-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Given an input sequence, get the top k probability spectrum at the given index</span></span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        logits: predicted logits for the input sequence</span></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input_ids: input sequence token IDs</span></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        i: index to get the probability spectrum at</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        k: top k, default is 6</span></span>
<span id="cb31-11"></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A Pandas DataFrame containing the top k probability spectrum at the given index</span></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-15"></span>
<span id="cb31-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted logits for an input sequence, excluding the last element</span></span>
<span id="cb31-17">    adjusted_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb31-18"></span>
<span id="cb31-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input sequence, starting from the second element</span></span>
<span id="cb31-20">    adjusted_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb31-21"></span>
<span id="cb31-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the probability distribution predicted by the model</span></span>
<span id="cb31-23">    probability_distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(adjusted_logits[i], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb31-24"></span>
<span id="cb31-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the top k probabilities and their respective indices, default k=6</span></span>
<span id="cb31-26">    top_probability_distribution, top_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probability_distribution.topk(k)</span>
<span id="cb31-27"></span>
<span id="cb31-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the top k probability spectrum as a DataFrame</span></span>
<span id="cb31-29">    probability_spectrum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb31-30">        {</span>
<span id="cb31-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span>: [tokenizer.decode(token) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> top_indices.tolist()],</span>
<span id="cb31-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"probability"</span>: top_probability_distribution.tolist(),</span>
<span id="cb31-33">        }</span>
<span id="cb31-34">    )</span>
<span id="cb31-35"></span>
<span id="cb31-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decode the input sequence as a string</span></span>
<span id="cb31-37">    matching_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.decode(adjusted_input_ids[i])</span>
<span id="cb31-38"></span>
<span id="cb31-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Highlight the matching string in the probability spectrum</span></span>
<span id="cb31-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> highlight_prompt_at(x):</span>
<span id="cb31-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> matching_token:</span>
<span id="cb31-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"background-color: #6495ED"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span>
<span id="cb31-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb31-44">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span>
<span id="cb31-45"></span>
<span id="cb31-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> probability_spectrum.style.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(highlight_prompt_at, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-47"></span>
<span id="cb31-48"></span>
<span id="cb31-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cross_entropy_at(logits, input_ids, i):</span>
<span id="cb31-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Given an input sequence, get the cross entropy at the given index</span></span>
<span id="cb31-51"></span>
<span id="cb31-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb31-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        logits: predicted logits for the input sequence</span></span>
<span id="cb31-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input_ids: input sequence token IDs</span></span>
<span id="cb31-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        i: index to get the cross entropy at</span></span>
<span id="cb31-56"></span>
<span id="cb31-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb31-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The cross entropy at the given index</span></span>
<span id="cb31-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-60"></span>
<span id="cb31-61">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted logits for an input sequence, excluding the last element</span></span>
<span id="cb31-62">    adjusted_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb31-63"></span>
<span id="cb31-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input sequence, starting from the second element</span></span>
<span id="cb31-65">    adjusted_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb31-66"></span>
<span id="cb31-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the cross entropy per input sequence</span></span>
<span id="cb31-68">    cross_entropy_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy(</span>
<span id="cb31-69">        adjusted_logits, adjusted_input_ids, reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span></span>
<span id="cb31-70">    )</span>
<span id="cb31-71"></span>
<span id="cb31-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cross_entropy_seq[i].item()</span>
<span id="cb31-73"></span>
<span id="cb31-74"></span>
<span id="cb31-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cross_entropy_per_token(logits, input_ids, matching_sequence_tokenized):</span>
<span id="cb31-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Given a matching sequence, get the cross entropy for each token in the matching sequence</span></span>
<span id="cb31-77"></span>
<span id="cb31-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb31-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        logits: predicted logits for the input sequence</span></span>
<span id="cb31-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input_ids: input sequence token IDs</span></span>
<span id="cb31-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        matching_sequence_tokenized: tokenized matching sequence</span></span>
<span id="cb31-82"></span>
<span id="cb31-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb31-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A Pandas DataFrame containing the cross entropy for each token in the matching sequence</span></span>
<span id="cb31-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-86"></span>
<span id="cb31-87">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted logits for an input sequence, excluding the last element</span></span>
<span id="cb31-88">    adjusted_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb31-89"></span>
<span id="cb31-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input sequence, starting from the second element</span></span>
<span id="cb31-91">    adjusted_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb31-92"></span>
<span id="cb31-93">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the cross entropy per input sequence</span></span>
<span id="cb31-94">    cross_entropy_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy(</span>
<span id="cb31-95">        adjusted_logits, adjusted_input_ids, reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span></span>
<span id="cb31-96">    )</span>
<span id="cb31-97"></span>
<span id="cb31-98">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decode the tokenized matching sequence as a string</span></span>
<span id="cb31-99">    matching_sequence_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-100">        tokenizer.decode(token) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> matching_sequence_tokenized.input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb31-101">    ]</span>
<span id="cb31-102"></span>
<span id="cb31-103">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decoded matching sequence token, starting from the second element</span></span>
<span id="cb31-104">    adjusted_matching_sequence_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matching_sequence_token[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb31-105"></span>
<span id="cb31-106">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.DataFrame(</span>
<span id="cb31-107">        {</span>
<span id="cb31-108">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span>: adjusted_matching_sequence_token,</span>
<span id="cb31-109">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross_entropy"</span>: cross_entropy_seq[</span>
<span id="cb31-110">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(adjusted_matching_sequence_token) :</span>
<span id="cb31-111">            ].tolist(),</span>
<span id="cb31-112">        }</span>
<span id="cb31-113">    )</span></code></pre></div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb32-2"></span>
<span id="cb32-3">prob_spectrum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probability_spectrum_at(</span>
<span id="cb32-4">    model_logits, prompt_input_ids, sconj_token_index</span>
<span id="cb32-5">)</span>
<span id="cb32-6"></span>
<span id="cb32-7">prob_spectrum</span></code></pre></div>
<p>Let’s also look at the cross-entropy and perplexity of the sentence with the subordinating conjunction:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the sentence with the subordinating conjunction (entire input sequence)</span></span>
<span id="cb33-4">sentence_per_token_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_per_token(</span>
<span id="cb33-5">    model_logits, prompt_input_ids, sentence_tokenized</span>
<span id="cb33-6">)</span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean cross-entropy of the sentence with the subordinating conjunction (entire input sequence)</span></span>
<span id="cb33-9">mean_sentence_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_per_token_cross_entropy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross_entropy"</span>].mean()</span>
<span id="cb33-10"></span>
<span id="cb33-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the sentence with the subordinating conjunction (entire input sequence)</span></span>
<span id="cb33-12">sentence_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(mean_sentence_cross_entropy)</span>
<span id="cb33-13"></span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the independent clause</span></span>
<span id="cb33-15">independent_clause_per_token_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_per_token(</span>
<span id="cb33-16">    model_logits, prompt_input_ids, independent_clause_tokenized</span>
<span id="cb33-17">)</span>
<span id="cb33-18"></span>
<span id="cb33-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean cross-entropy of the independent clause</span></span>
<span id="cb33-20">mean_independent_clause_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> independent_clause_per_token_cross_entropy[</span>
<span id="cb33-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross_entropy"</span></span>
<span id="cb33-22">].mean()</span>
<span id="cb33-23"></span>
<span id="cb33-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the independent clause</span></span>
<span id="cb33-25">independent_clause_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(mean_independent_clause_cross_entropy)</span>
<span id="cb33-26"></span>
<span id="cb33-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the subordinate clause</span></span>
<span id="cb33-28">subordinate_clause_per_token_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_per_token(</span>
<span id="cb33-29">    model_logits, prompt_input_ids, subordinate_clause_tokenized</span>
<span id="cb33-30">)</span>
<span id="cb33-31"></span>
<span id="cb33-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean cross-entropy of the subordinate clause</span></span>
<span id="cb33-33">mean_subordinate_clause_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subordinate_clause_per_token_cross_entropy[</span>
<span id="cb33-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross_entropy"</span></span>
<span id="cb33-35">].mean()</span>
<span id="cb33-36"></span>
<span id="cb33-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the subordinate clause</span></span>
<span id="cb33-38">subordinate_clause_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(mean_subordinate_clause_cross_entropy)</span>
<span id="cb33-39"></span>
<span id="cb33-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the subordinating conjunction</span></span>
<span id="cb33-41">subordinating_conjunction_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_at(</span>
<span id="cb33-42">    model_logits, prompt_input_ids, sconj_token_index</span>
<span id="cb33-43">)</span>
<span id="cb33-44"></span>
<span id="cb33-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the subordinating conjunction</span></span>
<span id="cb33-46">subordinating_conjunction_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(subordinating_conjunction_cross_entropy)</span></code></pre></div>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print in the order of the sentence structure</span></span>
<span id="cb34-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> independent_clause_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> subordinate_clause_index:</span>
<span id="cb34-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Structure:"</span>)</span>
<span id="cb34-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; ::= &lt;subordinate-clause&gt; &lt;independent-clause&gt;"</span>)</span>
<span id="cb34-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Metrics:"</span>)</span>
<span id="cb34-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; cross-entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_sentence_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; perplexity:    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sentence_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_subordinate_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinate_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; cross-entropy:               </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; perplexity:                  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_independent_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>independent_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb34-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Structure:"</span>)</span>
<span id="cb34-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; ::= &lt;independent-clause&gt; &lt;subordinate-clause&gt;"</span>)</span>
<span id="cb34-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Metrics:"</span>)</span>
<span id="cb34-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; cross-entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_sentence_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; perplexity:    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sentence_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_independent_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>independent_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; cross-entropy:               </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; perplexity:                  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_subordinate_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-27">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinate_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
<section id="when-context-is-randomly-shuffled" class="level4">
<h4 class="anchored" data-anchor-id="when-context-is-randomly-shuffled">When Context Is Randomly Shuffled</h4>
<p>Let’s shuffle the context and feed it into the model to get the predicted logits:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">last_sconj_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book[selected_book[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"has_sconj"</span>]].index[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb35-2"></span>
<span id="cb35-3">context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(last_sconj_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) : last_sconj_index][</span>
<span id="cb35-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span></span>
<span id="cb35-5">].tolist()</span>
<span id="cb35-6"></span>
<span id="cb35-7">random.Random(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>).shuffle(context)</span>
<span id="cb35-8"></span>
<span id="cb35-9">context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(context)</span>
<span id="cb35-10"></span>
<span id="cb35-11">sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>]</span></code></pre></div>
<p>Let’s take a small peek at the context:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 50 characters of the context</span></span>
<span id="cb36-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(context[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>].strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ... "</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb36-5"></span>
<span id="cb36-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the last 50 characters of the context</span></span>
<span id="cb36-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(context[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:].strip(), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>Let’s take a look at the sentence with the subordinating conjunction:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sentence</span></span>
<span id="cb37-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sentence)</span></code></pre></div>
<p>Same steps as before:</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the context (to be used later, not as an input sequence)</span></span>
<span id="cb38-4">context_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(context, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(device)</span>
<span id="cb38-5">context_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context_tokenized.input_ids</span>
<span id="cb38-6"></span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the sentence (to be used later, not as an input sequence)</span></span>
<span id="cb38-8">sentence_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(sentence, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(device)</span>
<span id="cb38-9">sentence_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_tokenized.input_ids</span>
<span id="cb38-10"></span>
<span id="cb38-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the context and the sentence as an input sequence</span></span>
<span id="cb38-12">prompt_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sentence, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>).to(device)</span>
<span id="cb38-13">prompt_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt_tokenized.input_ids</span>
<span id="cb38-14"></span>
<span id="cb38-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the predicted logits for the input sequence</span></span>
<span id="cb38-16">model_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(prompt_input_ids).logits</span></code></pre></div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the subordinating conjunction from the book</span></span>
<span id="cb39-4">sconj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sconj"</span>]</span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decode the context as a string, excluding the first token</span></span>
<span id="cb39-7">context_decoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tokenizer.decode(token) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> context_input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb39-8"></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decode the sentence as a string, excluding the first token</span></span>
<span id="cb39-10">sentence_decoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tokenizer.decode(token) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sentence_input_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb39-11"></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the subordinating conjunction token in the input sequence</span></span>
<span id="cb39-13">sconj_token_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(context_decoded) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sentence_decoded.index(sconj)</span>
<span id="cb39-14"></span>
<span id="cb39-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the subordinating conjunction in the sentence (not the input sequence, but from the book)</span></span>
<span id="cb39-16">sconj_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].find(sconj)</span>
<span id="cb39-17"></span>
<span id="cb39-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Figure out which type of clause comes first</span></span>
<span id="cb39-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sconj <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sentence[:sconj_index]:</span>
<span id="cb39-20">    independent_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[:sconj_index]</span>
<span id="cb39-21">    subordinate_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[sconj_index:]</span>
<span id="cb39-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb39-23">    independent_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[sconj_index:]</span>
<span id="cb39-24">    subordinate_clause <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence[:sconj_index]</span>
<span id="cb39-25"></span>
<span id="cb39-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the independent clause in the sentence (not the input sequence, but from the book)</span></span>
<span id="cb39-27">independent_clause_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].find(</span>
<span id="cb39-28">    independent_clause</span>
<span id="cb39-29">)</span>
<span id="cb39-30"></span>
<span id="cb39-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the subordinate clause in the sentence (not the input sequence, but from the book)</span></span>
<span id="cb39-32">subordinate_clause_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selected_book.iloc[last_sconj_index][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>].find(</span>
<span id="cb39-33">    subordinate_clause</span>
<span id="cb39-34">)</span>
<span id="cb39-35"></span>
<span id="cb39-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the independent clause</span></span>
<span id="cb39-37">independent_clause_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb39-38">    independent_clause, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span></span>
<span id="cb39-39">).to(device)</span>
<span id="cb39-40"></span>
<span id="cb39-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize the subordinate clause</span></span>
<span id="cb39-42">subordinate_clause_tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb39-43">    subordinate_clause, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span></span>
<span id="cb39-44">).to(device)</span></code></pre></div>
<p>Given that we have fed in a randomly shuffled context, let’s take a look at the top k probability spectrum at the subordinating conjunction:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">prob_spectrum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probability_spectrum_at(</span>
<span id="cb40-2">    model_logits, prompt_input_ids, sconj_token_index</span>
<span id="cb40-3">)</span>
<span id="cb40-4"></span>
<span id="cb40-5">prob_spectrum</span></code></pre></div>
<p>Let’s also look at the cross-entropy and perplexity of the sentence with the subordinating conjunction:</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb41-2"></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the sentence with the subordinating conjunction (entire input sequence)</span></span>
<span id="cb41-4">sentence_per_token_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_per_token(</span>
<span id="cb41-5">    model_logits, prompt_input_ids, sentence_tokenized</span>
<span id="cb41-6">)</span>
<span id="cb41-7"></span>
<span id="cb41-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean cross-entropy of the sentence with the subordinating conjunction (entire input sequence)</span></span>
<span id="cb41-9">mean_sentence_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_per_token_cross_entropy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross_entropy"</span>].mean()</span>
<span id="cb41-10"></span>
<span id="cb41-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the sentence with the subordinating conjunction (entire input sequence)</span></span>
<span id="cb41-12">sentence_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(mean_sentence_cross_entropy)</span>
<span id="cb41-13"></span>
<span id="cb41-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the independent clause</span></span>
<span id="cb41-15">independent_clause_per_token_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_per_token(</span>
<span id="cb41-16">    model_logits, prompt_input_ids, independent_clause_tokenized</span>
<span id="cb41-17">)</span>
<span id="cb41-18"></span>
<span id="cb41-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean cross-entropy of the independent clause</span></span>
<span id="cb41-20">mean_independent_clause_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> independent_clause_per_token_cross_entropy[</span>
<span id="cb41-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross_entropy"</span></span>
<span id="cb41-22">].mean()</span>
<span id="cb41-23"></span>
<span id="cb41-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the independent clause</span></span>
<span id="cb41-25">independent_clause_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(mean_independent_clause_cross_entropy)</span>
<span id="cb41-26"></span>
<span id="cb41-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the subordinate clause</span></span>
<span id="cb41-28">subordinate_clause_per_token_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_per_token(</span>
<span id="cb41-29">    model_logits, prompt_input_ids, subordinate_clause_tokenized</span>
<span id="cb41-30">)</span>
<span id="cb41-31"></span>
<span id="cb41-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean cross-entropy of the subordinate clause</span></span>
<span id="cb41-33">mean_subordinate_clause_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subordinate_clause_per_token_cross_entropy[</span>
<span id="cb41-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross_entropy"</span></span>
<span id="cb41-35">].mean()</span>
<span id="cb41-36"></span>
<span id="cb41-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the subordinate clause</span></span>
<span id="cb41-38">subordinate_clause_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(mean_subordinate_clause_cross_entropy)</span>
<span id="cb41-39"></span>
<span id="cb41-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-entropy of the subordinating conjunction</span></span>
<span id="cb41-41">subordinating_conjunction_cross_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_at(</span>
<span id="cb41-42">    model_logits, prompt_input_ids, sconj_token_index</span>
<span id="cb41-43">)</span>
<span id="cb41-44"></span>
<span id="cb41-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perplexity of the subordinating conjunction</span></span>
<span id="cb41-46">subordinating_conjunction_perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(subordinating_conjunction_cross_entropy)</span></code></pre></div>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print in the order of the sentence structure</span></span>
<span id="cb42-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> independent_clause_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> subordinate_clause_index:</span>
<span id="cb42-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Structure:"</span>)</span>
<span id="cb42-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; ::= &lt;subordinate-clause&gt; &lt;independent-clause&gt;"</span>)</span>
<span id="cb42-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Metrics:"</span>)</span>
<span id="cb42-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; cross-entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_sentence_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; perplexity:    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sentence_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_subordinate_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinate_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; cross-entropy:               </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; perplexity:                  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_independent_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>independent_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb42-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Structure:"</span>)</span>
<span id="cb42-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; ::= &lt;independent-clause&gt; &lt;subordinate-clause&gt;"</span>)</span>
<span id="cb42-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Metrics:"</span>)</span>
<span id="cb42-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; cross-entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_sentence_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;sentence-with-SCONJ&gt; perplexity:    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sentence_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_independent_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;independent-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>independent_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; cross-entropy:               </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;SCONJ&gt; perplexity:                  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinating_conjunction_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; cross-entropy:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_subordinate_clause_cross_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-27">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;subordinate-clause&gt; perplexity:     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subordinate_clause_perplexity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
</section>
</section>
<section id="results-and-conclusion" class="level2">
<h2 class="anchored" data-anchor-id="results-and-conclusion">Results and Conclusion</h2>
<p>Our analysis section demonstrates that the cross-entropy and perplexity of the sentence with the subordinating conjunction change based on the context provided to the model. Furthermore, we observed that the probability of the subordinating conjunction is also affected by the context. This suggests that the context provided to the model is important for predicting subordinating conjunctions. In other words, the context provided to the model can influence the likelihood of the model predicting subordinating conjunctions. Moreover, we have also observed that, despite the change in the context, the cross-entropy and perplexity around the subordinate clause did not change as much as around the independent clause. Although this warrants more thorough investigation, it suggests that there is a certain kind of subordinating conjunction that appears to be more useful, even to the LLM (as it was still likely to construct the same subordinate clause even with the contextual change).</p>
</section>
<section id="limitations" class="level2">
<h2 class="anchored" data-anchor-id="limitations">Limitations</h2>
<p>Our work is not without limitations. Firstly, we have only analyzed the LLM with one book, which is not representative of different kinds of writing contexts. Furthermore, our approach is currently only able to parse subordinate clauses that position the subordinating conjunction in the middle of the sentence. There are certain edge cases related to the positioning of the subordinating conjunctions that we have not considered.</p>
</section>
<section id="future-work" class="level2">
<h2 class="anchored" data-anchor-id="future-work">Future Work</h2>
<p>A natural extension of this work is to evaluate the LLM’s likelihood of predicting subordinating conjunctions with a more diverse and representative sample of data. Furthermore, we can also evaluate the LLM’s likelihood of predicting other kinds of conjunctions, such as coordinating conjunctions. Moreover, we can also evaluate the LLM’s likelihood of predicting subordinating conjunctions in different kinds of writing contexts, such as academic writing instead of books. Another way to extend this work is to evaluate the relationship between the LLM’s hyperparameters and its likelihood of predicting subordinating conjunctions.</p>
</section>
<section id="appendix" class="level2">
<h2 class="anchored" data-anchor-id="appendix">Appendix</h2>
<section id="autoawq-quantization" class="level3">
<h3 class="anchored" data-anchor-id="autoawq-quantization">AutoAWQ Quantization</h3>
<p>In this section, we have documented our approach to quantizing the <a href="https://huggingface.co/meta-llama/Llama-2-7b-chat-hf">Llama-2-7b-chat-hf</a> model using <a href="https://github.com/casper-hansen/AutoAWQ">AutoAWQ</a> into 4-bit precision. This reduces the amount of computational resources required to run inference on the model while still maintaining a high level of accuracy.</p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> awq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoAWQForCausalLM</span>
<span id="cb43-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AwqConfig</span></code></pre></div>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meta-llama/Llama-2-7b-chat-hf"</span></span>
<span id="cb44-2">quantized_model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Llama-2-7b-chat-hf-awq"</span></span>
<span id="cb44-3"></span>
<span id="cb44-4">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_name, trust_remote_code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb44-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoAWQForCausalLM.from_pretrained(model_name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low_cpu_mem_usage"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>})</span></code></pre></div>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setup AutoAWQ quantization configuration</span></span>
<span id="cb45-2">quant_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb45-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero_point"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb45-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q_group_size"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,</span>
<span id="cb45-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w_bit"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb45-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GEMM"</span>,</span>
<span id="cb45-7">}</span>
<span id="cb45-8"></span>
<span id="cb45-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quantize the model</span></span>
<span id="cb45-10">model.quantize(tokenizer, quant_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>quant_config)</span></code></pre></div>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setup Transformer compatible quantization configuration</span></span>
<span id="cb46-2">quantization_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AwqConfig(</span>
<span id="cb46-3">    bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>quant_config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w_bit"</span>],</span>
<span id="cb46-4">    group_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>quant_config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q_group_size"</span>],</span>
<span id="cb46-5">    zero_point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>quant_config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero_point"</span>],</span>
<span id="cb46-6">    version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>quant_config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span>].lower(),</span>
<span id="cb46-7">).to_dict()</span>
<span id="cb46-8"></span>
<span id="cb46-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pass the new quantization configuration to the model</span></span>
<span id="cb46-10">model.model.config.quantization_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quantization_config</span>
<span id="cb46-11"></span>
<span id="cb46-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the quantized model weights</span></span>
<span id="cb46-13">tokenizer.save_pretrained(quantized_model_path)</span>
<span id="cb46-14">model.save_quantized(quantized_model_path)</span></code></pre></div>
<p>To promote reproducibility of this work, we have uploaded our quantized model to Hugging Face repositories. You can access our quantized model here: <a href="https://huggingface.co/CalvinU/Llama-2-7b-chat-hf-awq">CalvinU/Llama-2-7b-chat-hf-awq</a>.</p>
</section>
<section id="scalable-data-collection" class="level3">
<h3 class="anchored" data-anchor-id="scalable-data-collection">Scalable Data Collection</h3>
<p>In the EDA, we have only looked at one book. However, in a language modeling task, we would likely need a <em>sample</em> of data that is diverse and representative of different kinds of writing. In this section, we have documented a scalable approach to collecting and processing data from <a href="https://www.gutenberg.org/">Project Gutenberg</a>.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb47-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb47-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb47-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spacy</span>
<span id="cb47-5"></span>
<span id="cb47-6">nlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spacy.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en_core_web_sm"</span>)</span></code></pre></div>
<p>Here are the functions we have used. All of them were already defined in the EDA section, except for <code>download_books</code>, which is a wrapper function for <code>download_book</code> that downloads multiple books instead of just one:</p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_book(book_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb48-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Download a book from Project Gutenberg</span></span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb48-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        book_id: The Project Gutenberg ID of the book to download</span></span>
<span id="cb48-6"></span>
<span id="cb48-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb48-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A tuple containing the book title and the book text</span></span>
<span id="cb48-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb48-10"></span>
<span id="cb48-11">    gutendex_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://gutendex.com/books/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>book_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span></span>
<span id="cb48-12"></span>
<span id="cb48-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb48-14">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(gutendex_url)</span>
<span id="cb48-15">        response.raise_for_status()</span>
<span id="cb48-16">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb48-17"></span>
<span id="cb48-18">        book_language <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"languages"</span>]</span>
<span id="cb48-19"></span>
<span id="cb48-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only download books in English</span></span>
<span id="cb48-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> book_language:</span>
<span id="cb48-22">            book_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>]</span>
<span id="cb48-23"></span>
<span id="cb48-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only download books in plain text</span></span>
<span id="cb48-25">            mime_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/plain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/plain; charset=us-ascii"</span>]</span>
<span id="cb48-26"></span>
<span id="cb48-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mime_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mime_types:</span>
<span id="cb48-28">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mime_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formats"</span>]:</span>
<span id="cb48-29">                    book_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formats"</span>][mime_type]</span>
<span id="cb48-30">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb48-31"></span>
<span id="cb48-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> book_url <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb48-33">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The book is not available in plain text."</span>)</span>
<span id="cb48-34"></span>
<span id="cb48-35">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(book_url)</span>
<span id="cb48-36">            response.raise_for_status()</span>
<span id="cb48-37"></span>
<span id="cb48-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> book_title, response.text</span>
<span id="cb48-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb48-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The book is not in English."</span>)</span>
<span id="cb48-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> requests.exceptions.HTTPError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> err:</span>
<span id="cb48-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(err)</span>
<span id="cb48-43"></span>
<span id="cb48-44"></span>
<span id="cb48-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_books(n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]]:</span>
<span id="cb48-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Download n books from Project Gutenberg</span></span>
<span id="cb48-47"></span>
<span id="cb48-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb48-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n: The number of books to download</span></span>
<span id="cb48-50"></span>
<span id="cb48-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb48-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A list of downloaded books</span></span>
<span id="cb48-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb48-54"></span>
<span id="cb48-55">    max_book_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gutendex.com/books/"</span>).json()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>]</span>
<span id="cb48-56"></span>
<span id="cb48-57">    books <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb48-58"></span>
<span id="cb48-59">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb48-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb48-61">        book_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_book_count)</span>
<span id="cb48-62"></span>
<span id="cb48-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb48-64">            book_title, book_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_book(book_id)</span>
<span id="cb48-65">            books.append((book_id, book_title, book_text))</span>
<span id="cb48-66">            i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb48-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb48-68">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb48-69"></span>
<span id="cb48-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> books</span>
<span id="cb48-71"></span>
<span id="cb48-72"></span>
<span id="cb48-73"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sanitize_text(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb48-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Remove extra information from the text</span></span>
<span id="cb48-75"></span>
<span id="cb48-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb48-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        text: The text to sanitize</span></span>
<span id="cb48-78"></span>
<span id="cb48-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb48-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The sanitized text</span></span>
<span id="cb48-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb48-82"></span>
<span id="cb48-83">    start_marker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"***"</span></span>
<span id="cb48-84">    end_marker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*** END OF THE PROJECT GUTENBERG EBOOK"</span></span>
<span id="cb48-85"></span>
<span id="cb48-86">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the second occurrence of the start marker</span></span>
<span id="cb48-87">    start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.find(start_marker, text.find(start_marker) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb48-88"></span>
<span id="cb48-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the first occurrence of the end marker</span></span>
<span id="cb48-90">    end_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.find(end_marker)</span>
<span id="cb48-91"></span>
<span id="cb48-92">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the extra information based on the marker indices</span></span>
<span id="cb48-93">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb48-94">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text[start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(start_marker) : end_index].strip()</span>
<span id="cb48-95"></span>
<span id="cb48-96">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> text</span>
<span id="cb48-97"></span>
<span id="cb48-98"></span>
<span id="cb48-99"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sentence_spliter(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb48-100">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Split the text into sentences</span></span>
<span id="cb48-101"></span>
<span id="cb48-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arg:</span></span>
<span id="cb48-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        text: The text to split</span></span>
<span id="cb48-104"></span>
<span id="cb48-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb48-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A list of sentences</span></span>
<span id="cb48-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb48-108"></span>
<span id="cb48-109">    nlp.max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text)</span>
<span id="cb48-110"></span>
<span id="cb48-111">    pipe_disable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ner"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lemmatizer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"textcat"</span>]</span>
<span id="cb48-112"></span>
<span id="cb48-113">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove line breaks and split the text into sentences</span></span>
<span id="cb48-114">    doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nlp.pipe([text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)], disable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pipe_disable)</span>
<span id="cb48-115"></span>
<span id="cb48-116">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return a list of sentences without leading and trailing whitespace</span></span>
<span id="cb48-117">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [sent.text.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> doc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> doc <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sent <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> doc.sents]</span></code></pre></div>
</details>
<p>Download 10 random books from <a href="https://www.gutenberg.org/">Project Gutenberg</a>:</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">n_books <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb49-2"></span>
<span id="cb49-3">books10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb49-4">    download_books(n_books), </span>
<span id="cb49-5">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>]</span>
<span id="cb49-6">)</span>
<span id="cb49-7"></span>
<span id="cb49-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(books10) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> n_books</span></code></pre></div>
<p>Clean the texts:</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">books10[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean_text"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> books10[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(sanitize_text)</span></code></pre></div>
<p>Split the texts into sentences:</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">books10_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb51-2"></span>
<span id="cb51-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each book, split the text into sentences</span></span>
<span id="cb51-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(books10)):</span>
<span id="cb51-5">    books10_sentences.append(</span>
<span id="cb51-6">        (</span>
<span id="cb51-7">            books10[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book_id"</span>].iloc[i],</span>
<span id="cb51-8">            books10[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>].iloc[i],</span>
<span id="cb51-9">            sentence_spliter(books10[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean_text"</span>].iloc[i]),</span>
<span id="cb51-10">        )</span>
<span id="cb51-11">    )</span></code></pre></div>
<p>Create a new DataFrame with the sentences:</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each sentences in each id, create a new row</span></span>
<span id="cb52-2">books10_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb52-3">    (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, title, sent) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, title, sents <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> books10_sentences <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sent <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sents</span>
<span id="cb52-4">]</span>
<span id="cb52-5"></span>
<span id="cb52-6">books10_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb52-7">    books10_sentences, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>]</span>
<span id="cb52-8">)</span></code></pre></div>
<p>To promote reproducibility of this work, we have saved the data we have collected and processed using this approach as a <a href="https://parquet.apache.org/">parquet</a> file. You can view and access our dataset here: <a href="https://huggingface.co/datasets/CalvinU/project-gutenberg">CalvinU/project-gutenberg</a>.</p>



</section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-Arnold_Chauncey_Gajos_2018" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">Kenneth C. Arnold, Krysta Chauncey, and Krzysztof Z. Gajos. 2018. Sentiment bias in predictive text recommendations results in biased writing. In <em>Proceedings of the 44th graphics interface conference</em> (<em>GI ’18</em>), 2018. Association for Computing Machinery, Toronto, Ontario, Canada, 42–49. Retrieved from <a href="https://doi.org/10.20380/GI2018.07">https://doi.org/10.20380/GI2018.07</a></div>
</div>
<div id="ref-Arnold_Chauncey_Gajos_2020" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">Kenneth C. Arnold, Krysta Chauncey, and Krzysztof Z. Gajos. 2020. Predictive text encourages predictable writing. In <em>Proceedings of the 25th international conference on intelligent user interfaces</em> (<em>IUI ’20</em>), 2020. Association for Computing Machinery, New York, NY, USA, 128–138. Retrieved from <a href="https://doi.org/10.1145/3377325.3377523">https://doi.org/10.1145/3377325.3377523</a></div>
</div>
<div id="ref-Flower_Hayes_1981" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">Linda Flower and John R. Hayes. 1981. A cognitive process theory of writing. <em>College Composition and Communication</em> 32, 4 (1981), 365–387.</div>
</div>
<div id="ref-Jakesch_Bhat_Buschek_Zalmanson_Naaman_2023" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">Maurice Jakesch, Advait Bhat, Daniel Buschek, Lior Zalmanson, and Mor Naaman. 2023. Co-writing with opinionated language models affects users’ views. In <em>Proceedings of the 2023 CHI conference on human factors in computing systems</em> (<em>CHI ’23</em>), 2023. Association for Computing Machinery, New York, NY, USA, 1–15. Retrieved from <a href="https://doi.org/10.1145/3544548.3581196">https://doi.org/10.1145/3544548.3581196</a></div>
</div>
<div id="ref-Jun_Koo_Scaria_2021" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">Hyechan Jun, Ha-Ram Koo, and Advait Scaria. 2021. DAISI: The deep artificial intelligence system for interviews. 2021. Retrieved from <a href="https://haramkoo.github.io/InterviewAI/">https://haramkoo.github.io/InterviewAI/</a></div>
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://www.merriam-webster.com/dictionary/inspire↩︎</p></li>
<li id="fn2"><p>Chosen for its simplicity, however, other quantization methods, such as <a href="https://github.com/ggerganov/llama.cpp">llama.cpp</a>, will also likely work.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://jihokim.dev/blog/inspirative-text-prediction/</guid>
  <pubDate>Tue, 12 Dec 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
